// Code generated from ../../../solomon/libs/java/solomon-grammar/SolomonLexer.g4 by ANTLR 4.13.2. DO NOT EDIT.

package parser

import (
	"fmt"
	"github.com/antlr4-go/antlr/v4"
	"sync"
	"unicode"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type SolomonLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var SolomonLexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	ChannelNames           []string
	ModeNames              []string
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func solomonlexerLexerInit() {
	staticData := &SolomonLexerLexerStaticData
	staticData.ChannelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.ModeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.LiteralNames = []string{
		"", "'let'", "'by'", "'return'", "'{'", "'}'", "'('", "','", "')'",
		"'['", "']'", "'->'", "'+'", "'-'", "'/'", "'*'", "'!'", "'&&'", "'||'",
		"'<'", "'>'", "'<='", "'>='", "'=='", "'!='", "'!=='", "'=~'", "'!~'",
		"'=*'", "'!=*'", "'?'", "':'", "'='", "';'",
	}
	staticData.SymbolicNames = []string{
		"", "KW_LET", "KW_BY", "KW_RETURN", "OPENING_BRACE", "CLOSING_BRACE",
		"OPENING_PAREN", "COMMA", "CLOSING_PAREN", "OPENING_BRACKET", "CLOSING_BRACKET",
		"ARROW", "PLUS", "MINUS", "DIV", "MUL", "NOT", "AND", "OR", "LT", "GT",
		"LE", "GE", "EQ", "NE", "NOT_EQUIV", "REGEX", "NOT_REGEX", "ISUBSTRING",
		"NOT_ISUBSTRING", "QUESTION", "COLON", "ASSIGNMENT", "SEMICOLON", "IDENT_WITH_DOTS",
		"IDENT", "DURATION", "NUMBER", "STRING", "WS", "COMMENTS",
	}
	staticData.RuleNames = []string{
		"KW_LET", "KW_BY", "KW_RETURN", "OPENING_BRACE", "CLOSING_BRACE", "OPENING_PAREN",
		"COMMA", "CLOSING_PAREN", "OPENING_BRACKET", "CLOSING_BRACKET", "ARROW",
		"PLUS", "MINUS", "DIV", "MUL", "NOT", "AND", "OR", "LT", "GT", "LE",
		"GE", "EQ", "NE", "NOT_EQUIV", "REGEX", "NOT_REGEX", "ISUBSTRING", "NOT_ISUBSTRING",
		"QUESTION", "COLON", "ASSIGNMENT", "SEMICOLON", "IDENT_START", "IDENT_MID",
		"IDENT_MID_OR_DOT", "IDENT_WITH_DOTS", "IDENT", "DIGIT", "SCALE_SUFFIX",
		"DURATION", "NUMBER", "SQ", "DQ", "SQ_CHAR", "DQ_CHAR", "STRING", "WS",
		"COMMENTS",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 40, 312, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36,
		7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7,
		41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46,
		2, 47, 7, 47, 2, 48, 7, 48, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1,
		2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 4, 1, 4, 1, 5, 1,
		5, 1, 6, 1, 6, 1, 7, 1, 7, 1, 8, 1, 8, 1, 9, 1, 9, 1, 10, 1, 10, 1, 10,
		1, 11, 1, 11, 1, 12, 1, 12, 1, 13, 1, 13, 1, 14, 1, 14, 1, 15, 1, 15, 1,
		16, 1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 1, 18, 1, 18, 1, 19, 1, 19, 1, 20,
		1, 20, 1, 20, 1, 21, 1, 21, 1, 21, 1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1,
		23, 1, 24, 1, 24, 1, 24, 1, 24, 1, 25, 1, 25, 1, 25, 1, 26, 1, 26, 1, 26,
		1, 27, 1, 27, 1, 27, 1, 28, 1, 28, 1, 28, 1, 28, 1, 29, 1, 29, 1, 30, 1,
		30, 1, 31, 1, 31, 1, 32, 1, 32, 1, 33, 1, 33, 1, 34, 1, 34, 1, 35, 1, 35,
		1, 36, 1, 36, 5, 36, 196, 8, 36, 10, 36, 12, 36, 199, 9, 36, 1, 36, 1,
		36, 5, 36, 203, 8, 36, 10, 36, 12, 36, 206, 9, 36, 1, 37, 1, 37, 5, 37,
		210, 8, 37, 10, 37, 12, 37, 213, 9, 37, 1, 38, 1, 38, 1, 39, 1, 39, 1,
		40, 4, 40, 220, 8, 40, 11, 40, 12, 40, 221, 1, 40, 1, 40, 1, 40, 3, 40,
		227, 8, 40, 4, 40, 229, 8, 40, 11, 40, 12, 40, 230, 1, 41, 5, 41, 234,
		8, 41, 10, 41, 12, 41, 237, 9, 41, 1, 41, 3, 41, 240, 8, 41, 1, 41, 4,
		41, 243, 8, 41, 11, 41, 12, 41, 244, 1, 41, 1, 41, 3, 41, 249, 8, 41, 1,
		41, 4, 41, 252, 8, 41, 11, 41, 12, 41, 253, 3, 41, 256, 8, 41, 1, 41, 3,
		41, 259, 8, 41, 1, 42, 1, 42, 1, 43, 1, 43, 1, 44, 1, 44, 1, 44, 3, 44,
		268, 8, 44, 1, 45, 1, 45, 1, 45, 3, 45, 273, 8, 45, 1, 46, 1, 46, 5, 46,
		277, 8, 46, 10, 46, 12, 46, 280, 9, 46, 1, 46, 1, 46, 1, 46, 1, 46, 5,
		46, 286, 8, 46, 10, 46, 12, 46, 289, 9, 46, 1, 46, 1, 46, 3, 46, 293, 8,
		46, 1, 47, 4, 47, 296, 8, 47, 11, 47, 12, 47, 297, 1, 47, 1, 47, 1, 48,
		1, 48, 1, 48, 1, 48, 5, 48, 306, 8, 48, 10, 48, 12, 48, 309, 9, 48, 1,
		48, 1, 48, 0, 0, 49, 1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8,
		17, 9, 19, 10, 21, 11, 23, 12, 25, 13, 27, 14, 29, 15, 31, 16, 33, 17,
		35, 18, 37, 19, 39, 20, 41, 21, 43, 22, 45, 23, 47, 24, 49, 25, 51, 26,
		53, 27, 55, 28, 57, 29, 59, 30, 61, 31, 63, 32, 65, 33, 67, 0, 69, 0, 71,
		0, 73, 34, 75, 35, 77, 0, 79, 0, 81, 36, 83, 37, 85, 0, 87, 0, 89, 0, 91,
		0, 93, 38, 95, 39, 97, 40, 1, 0, 15, 3, 0, 65, 90, 95, 95, 97, 122, 4,
		0, 48, 57, 65, 90, 95, 95, 97, 122, 5, 0, 46, 46, 48, 57, 65, 90, 95, 95,
		97, 122, 1, 0, 48, 57, 6, 0, 69, 69, 71, 71, 77, 77, 80, 80, 84, 84, 107,
		107, 5, 0, 100, 100, 104, 104, 109, 109, 115, 115, 119, 119, 2, 0, 69,
		69, 101, 101, 2, 0, 43, 43, 45, 45, 1, 0, 39, 39, 1, 0, 34, 34, 2, 0, 39,
		39, 92, 92, 1, 0, 92, 92, 2, 0, 34, 34, 92, 92, 2, 0, 9, 13, 28, 32, 2,
		0, 10, 10, 13, 13, 322, 0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0,
		0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1,
		0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21,
		1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0,
		29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0, 0,
		0, 37, 1, 0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43, 1, 0, 0,
		0, 0, 45, 1, 0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0, 51, 1, 0,
		0, 0, 0, 53, 1, 0, 0, 0, 0, 55, 1, 0, 0, 0, 0, 57, 1, 0, 0, 0, 0, 59, 1,
		0, 0, 0, 0, 61, 1, 0, 0, 0, 0, 63, 1, 0, 0, 0, 0, 65, 1, 0, 0, 0, 0, 73,
		1, 0, 0, 0, 0, 75, 1, 0, 0, 0, 0, 81, 1, 0, 0, 0, 0, 83, 1, 0, 0, 0, 0,
		93, 1, 0, 0, 0, 0, 95, 1, 0, 0, 0, 0, 97, 1, 0, 0, 0, 1, 99, 1, 0, 0, 0,
		3, 103, 1, 0, 0, 0, 5, 106, 1, 0, 0, 0, 7, 113, 1, 0, 0, 0, 9, 115, 1,
		0, 0, 0, 11, 117, 1, 0, 0, 0, 13, 119, 1, 0, 0, 0, 15, 121, 1, 0, 0, 0,
		17, 123, 1, 0, 0, 0, 19, 125, 1, 0, 0, 0, 21, 127, 1, 0, 0, 0, 23, 130,
		1, 0, 0, 0, 25, 132, 1, 0, 0, 0, 27, 134, 1, 0, 0, 0, 29, 136, 1, 0, 0,
		0, 31, 138, 1, 0, 0, 0, 33, 140, 1, 0, 0, 0, 35, 143, 1, 0, 0, 0, 37, 146,
		1, 0, 0, 0, 39, 148, 1, 0, 0, 0, 41, 150, 1, 0, 0, 0, 43, 153, 1, 0, 0,
		0, 45, 156, 1, 0, 0, 0, 47, 159, 1, 0, 0, 0, 49, 162, 1, 0, 0, 0, 51, 166,
		1, 0, 0, 0, 53, 169, 1, 0, 0, 0, 55, 172, 1, 0, 0, 0, 57, 175, 1, 0, 0,
		0, 59, 179, 1, 0, 0, 0, 61, 181, 1, 0, 0, 0, 63, 183, 1, 0, 0, 0, 65, 185,
		1, 0, 0, 0, 67, 187, 1, 0, 0, 0, 69, 189, 1, 0, 0, 0, 71, 191, 1, 0, 0,
		0, 73, 193, 1, 0, 0, 0, 75, 207, 1, 0, 0, 0, 77, 214, 1, 0, 0, 0, 79, 216,
		1, 0, 0, 0, 81, 228, 1, 0, 0, 0, 83, 235, 1, 0, 0, 0, 85, 260, 1, 0, 0,
		0, 87, 262, 1, 0, 0, 0, 89, 267, 1, 0, 0, 0, 91, 272, 1, 0, 0, 0, 93, 292,
		1, 0, 0, 0, 95, 295, 1, 0, 0, 0, 97, 301, 1, 0, 0, 0, 99, 100, 5, 108,
		0, 0, 100, 101, 5, 101, 0, 0, 101, 102, 5, 116, 0, 0, 102, 2, 1, 0, 0,
		0, 103, 104, 5, 98, 0, 0, 104, 105, 5, 121, 0, 0, 105, 4, 1, 0, 0, 0, 106,
		107, 5, 114, 0, 0, 107, 108, 5, 101, 0, 0, 108, 109, 5, 116, 0, 0, 109,
		110, 5, 117, 0, 0, 110, 111, 5, 114, 0, 0, 111, 112, 5, 110, 0, 0, 112,
		6, 1, 0, 0, 0, 113, 114, 5, 123, 0, 0, 114, 8, 1, 0, 0, 0, 115, 116, 5,
		125, 0, 0, 116, 10, 1, 0, 0, 0, 117, 118, 5, 40, 0, 0, 118, 12, 1, 0, 0,
		0, 119, 120, 5, 44, 0, 0, 120, 14, 1, 0, 0, 0, 121, 122, 5, 41, 0, 0, 122,
		16, 1, 0, 0, 0, 123, 124, 5, 91, 0, 0, 124, 18, 1, 0, 0, 0, 125, 126, 5,
		93, 0, 0, 126, 20, 1, 0, 0, 0, 127, 128, 5, 45, 0, 0, 128, 129, 5, 62,
		0, 0, 129, 22, 1, 0, 0, 0, 130, 131, 5, 43, 0, 0, 131, 24, 1, 0, 0, 0,
		132, 133, 5, 45, 0, 0, 133, 26, 1, 0, 0, 0, 134, 135, 5, 47, 0, 0, 135,
		28, 1, 0, 0, 0, 136, 137, 5, 42, 0, 0, 137, 30, 1, 0, 0, 0, 138, 139, 5,
		33, 0, 0, 139, 32, 1, 0, 0, 0, 140, 141, 5, 38, 0, 0, 141, 142, 5, 38,
		0, 0, 142, 34, 1, 0, 0, 0, 143, 144, 5, 124, 0, 0, 144, 145, 5, 124, 0,
		0, 145, 36, 1, 0, 0, 0, 146, 147, 5, 60, 0, 0, 147, 38, 1, 0, 0, 0, 148,
		149, 5, 62, 0, 0, 149, 40, 1, 0, 0, 0, 150, 151, 5, 60, 0, 0, 151, 152,
		5, 61, 0, 0, 152, 42, 1, 0, 0, 0, 153, 154, 5, 62, 0, 0, 154, 155, 5, 61,
		0, 0, 155, 44, 1, 0, 0, 0, 156, 157, 5, 61, 0, 0, 157, 158, 5, 61, 0, 0,
		158, 46, 1, 0, 0, 0, 159, 160, 5, 33, 0, 0, 160, 161, 5, 61, 0, 0, 161,
		48, 1, 0, 0, 0, 162, 163, 5, 33, 0, 0, 163, 164, 5, 61, 0, 0, 164, 165,
		5, 61, 0, 0, 165, 50, 1, 0, 0, 0, 166, 167, 5, 61, 0, 0, 167, 168, 5, 126,
		0, 0, 168, 52, 1, 0, 0, 0, 169, 170, 5, 33, 0, 0, 170, 171, 5, 126, 0,
		0, 171, 54, 1, 0, 0, 0, 172, 173, 5, 61, 0, 0, 173, 174, 5, 42, 0, 0, 174,
		56, 1, 0, 0, 0, 175, 176, 5, 33, 0, 0, 176, 177, 5, 61, 0, 0, 177, 178,
		5, 42, 0, 0, 178, 58, 1, 0, 0, 0, 179, 180, 5, 63, 0, 0, 180, 60, 1, 0,
		0, 0, 181, 182, 5, 58, 0, 0, 182, 62, 1, 0, 0, 0, 183, 184, 5, 61, 0, 0,
		184, 64, 1, 0, 0, 0, 185, 186, 5, 59, 0, 0, 186, 66, 1, 0, 0, 0, 187, 188,
		7, 0, 0, 0, 188, 68, 1, 0, 0, 0, 189, 190, 7, 1, 0, 0, 190, 70, 1, 0, 0,
		0, 191, 192, 7, 2, 0, 0, 192, 72, 1, 0, 0, 0, 193, 197, 3, 67, 33, 0, 194,
		196, 3, 69, 34, 0, 195, 194, 1, 0, 0, 0, 196, 199, 1, 0, 0, 0, 197, 195,
		1, 0, 0, 0, 197, 198, 1, 0, 0, 0, 198, 200, 1, 0, 0, 0, 199, 197, 1, 0,
		0, 0, 200, 204, 5, 46, 0, 0, 201, 203, 3, 71, 35, 0, 202, 201, 1, 0, 0,
		0, 203, 206, 1, 0, 0, 0, 204, 202, 1, 0, 0, 0, 204, 205, 1, 0, 0, 0, 205,
		74, 1, 0, 0, 0, 206, 204, 1, 0, 0, 0, 207, 211, 3, 67, 33, 0, 208, 210,
		3, 69, 34, 0, 209, 208, 1, 0, 0, 0, 210, 213, 1, 0, 0, 0, 211, 209, 1,
		0, 0, 0, 211, 212, 1, 0, 0, 0, 212, 76, 1, 0, 0, 0, 213, 211, 1, 0, 0,
		0, 214, 215, 7, 3, 0, 0, 215, 78, 1, 0, 0, 0, 216, 217, 7, 4, 0, 0, 217,
		80, 1, 0, 0, 0, 218, 220, 3, 77, 38, 0, 219, 218, 1, 0, 0, 0, 220, 221,
		1, 0, 0, 0, 221, 219, 1, 0, 0, 0, 221, 222, 1, 0, 0, 0, 222, 226, 1, 0,
		0, 0, 223, 224, 5, 109, 0, 0, 224, 227, 5, 115, 0, 0, 225, 227, 7, 5, 0,
		0, 226, 223, 1, 0, 0, 0, 226, 225, 1, 0, 0, 0, 227, 229, 1, 0, 0, 0, 228,
		219, 1, 0, 0, 0, 229, 230, 1, 0, 0, 0, 230, 228, 1, 0, 0, 0, 230, 231,
		1, 0, 0, 0, 231, 82, 1, 0, 0, 0, 232, 234, 3, 77, 38, 0, 233, 232, 1, 0,
		0, 0, 234, 237, 1, 0, 0, 0, 235, 233, 1, 0, 0, 0, 235, 236, 1, 0, 0, 0,
		236, 239, 1, 0, 0, 0, 237, 235, 1, 0, 0, 0, 238, 240, 5, 46, 0, 0, 239,
		238, 1, 0, 0, 0, 239, 240, 1, 0, 0, 0, 240, 242, 1, 0, 0, 0, 241, 243,
		3, 77, 38, 0, 242, 241, 1, 0, 0, 0, 243, 244, 1, 0, 0, 0, 244, 242, 1,
		0, 0, 0, 244, 245, 1, 0, 0, 0, 245, 255, 1, 0, 0, 0, 246, 248, 7, 6, 0,
		0, 247, 249, 7, 7, 0, 0, 248, 247, 1, 0, 0, 0, 248, 249, 1, 0, 0, 0, 249,
		251, 1, 0, 0, 0, 250, 252, 3, 77, 38, 0, 251, 250, 1, 0, 0, 0, 252, 253,
		1, 0, 0, 0, 253, 251, 1, 0, 0, 0, 253, 254, 1, 0, 0, 0, 254, 256, 1, 0,
		0, 0, 255, 246, 1, 0, 0, 0, 255, 256, 1, 0, 0, 0, 256, 258, 1, 0, 0, 0,
		257, 259, 3, 79, 39, 0, 258, 257, 1, 0, 0, 0, 258, 259, 1, 0, 0, 0, 259,
		84, 1, 0, 0, 0, 260, 261, 7, 8, 0, 0, 261, 86, 1, 0, 0, 0, 262, 263, 7,
		9, 0, 0, 263, 88, 1, 0, 0, 0, 264, 268, 8, 10, 0, 0, 265, 266, 7, 11, 0,
		0, 266, 268, 9, 0, 0, 0, 267, 264, 1, 0, 0, 0, 267, 265, 1, 0, 0, 0, 268,
		90, 1, 0, 0, 0, 269, 273, 8, 12, 0, 0, 270, 271, 7, 11, 0, 0, 271, 273,
		9, 0, 0, 0, 272, 269, 1, 0, 0, 0, 272, 270, 1, 0, 0, 0, 273, 92, 1, 0,
		0, 0, 274, 278, 3, 85, 42, 0, 275, 277, 3, 89, 44, 0, 276, 275, 1, 0, 0,
		0, 277, 280, 1, 0, 0, 0, 278, 276, 1, 0, 0, 0, 278, 279, 1, 0, 0, 0, 279,
		281, 1, 0, 0, 0, 280, 278, 1, 0, 0, 0, 281, 282, 3, 85, 42, 0, 282, 293,
		1, 0, 0, 0, 283, 287, 3, 87, 43, 0, 284, 286, 3, 91, 45, 0, 285, 284, 1,
		0, 0, 0, 286, 289, 1, 0, 0, 0, 287, 285, 1, 0, 0, 0, 287, 288, 1, 0, 0,
		0, 288, 290, 1, 0, 0, 0, 289, 287, 1, 0, 0, 0, 290, 291, 3, 87, 43, 0,
		291, 293, 1, 0, 0, 0, 292, 274, 1, 0, 0, 0, 292, 283, 1, 0, 0, 0, 293,
		94, 1, 0, 0, 0, 294, 296, 7, 13, 0, 0, 295, 294, 1, 0, 0, 0, 296, 297,
		1, 0, 0, 0, 297, 295, 1, 0, 0, 0, 297, 298, 1, 0, 0, 0, 298, 299, 1, 0,
		0, 0, 299, 300, 6, 47, 0, 0, 300, 96, 1, 0, 0, 0, 301, 302, 5, 47, 0, 0,
		302, 303, 5, 47, 0, 0, 303, 307, 1, 0, 0, 0, 304, 306, 8, 14, 0, 0, 305,
		304, 1, 0, 0, 0, 306, 309, 1, 0, 0, 0, 307, 305, 1, 0, 0, 0, 307, 308,
		1, 0, 0, 0, 308, 310, 1, 0, 0, 0, 309, 307, 1, 0, 0, 0, 310, 311, 6, 48,
		0, 0, 311, 98, 1, 0, 0, 0, 21, 0, 197, 204, 211, 221, 226, 230, 235, 239,
		244, 248, 253, 255, 258, 267, 272, 278, 287, 292, 297, 307, 1, 6, 0, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// SolomonLexerInit initializes any static state used to implement SolomonLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewSolomonLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func SolomonLexerInit() {
	staticData := &SolomonLexerLexerStaticData
	staticData.once.Do(solomonlexerLexerInit)
}

// NewSolomonLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewSolomonLexer(input antlr.CharStream) *SolomonLexer {
	SolomonLexerInit()
	l := new(SolomonLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &SolomonLexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	l.channelNames = staticData.ChannelNames
	l.modeNames = staticData.ModeNames
	l.RuleNames = staticData.RuleNames
	l.LiteralNames = staticData.LiteralNames
	l.SymbolicNames = staticData.SymbolicNames
	l.GrammarFileName = "SolomonLexer.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// SolomonLexer tokens.
const (
	SolomonLexerKW_LET          = 1
	SolomonLexerKW_BY           = 2
	SolomonLexerKW_RETURN       = 3
	SolomonLexerOPENING_BRACE   = 4
	SolomonLexerCLOSING_BRACE   = 5
	SolomonLexerOPENING_PAREN   = 6
	SolomonLexerCOMMA           = 7
	SolomonLexerCLOSING_PAREN   = 8
	SolomonLexerOPENING_BRACKET = 9
	SolomonLexerCLOSING_BRACKET = 10
	SolomonLexerARROW           = 11
	SolomonLexerPLUS            = 12
	SolomonLexerMINUS           = 13
	SolomonLexerDIV             = 14
	SolomonLexerMUL             = 15
	SolomonLexerNOT             = 16
	SolomonLexerAND             = 17
	SolomonLexerOR              = 18
	SolomonLexerLT              = 19
	SolomonLexerGT              = 20
	SolomonLexerLE              = 21
	SolomonLexerGE              = 22
	SolomonLexerEQ              = 23
	SolomonLexerNE              = 24
	SolomonLexerNOT_EQUIV       = 25
	SolomonLexerREGEX           = 26
	SolomonLexerNOT_REGEX       = 27
	SolomonLexerISUBSTRING      = 28
	SolomonLexerNOT_ISUBSTRING  = 29
	SolomonLexerQUESTION        = 30
	SolomonLexerCOLON           = 31
	SolomonLexerASSIGNMENT      = 32
	SolomonLexerSEMICOLON       = 33
	SolomonLexerIDENT_WITH_DOTS = 34
	SolomonLexerIDENT           = 35
	SolomonLexerDURATION        = 36
	SolomonLexerNUMBER          = 37
	SolomonLexerSTRING          = 38
	SolomonLexerWS              = 39
	SolomonLexerCOMMENTS        = 40
)
